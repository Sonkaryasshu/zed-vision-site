{"version":3,"sources":["webpack:///./src/pages/using-typescript.tsx","webpack:///./src/components/layout.tsx"],"names":["UsingTypescript","path","location","title","to","query","StyledContent","styled","div","Layout","children","header","pathname","__PATH_PREFIX__","name","content","Date","getFullYear"],"mappings":"uFAAA,kFAyBeA,UAnB8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAT,OAC3C,gBAAC,IAAD,CAAQC,MAAM,mBAAmBD,SAAUA,GACzC,gBAAC,IAAD,CAAKC,MAAM,qBACX,oEACA,qEAC2C,sCAD3C,8DAE6D,yCAF7D,yEAMA,uEAC6C,wCAD7C,mBAEkB,wCAFlB,gBAEkD,uCAFlD,UAIA,0DAAkCF,EAAlC,QACA,gBAAC,OAAD,CAAMG,GAAG,KAAT,6BAMG,IAAMC,EAAQ,M,gCC3BrB,+DAUMC,EAVN,MAUsBC,EAAOC,IAAV,4EAAGD,CAAH,mCAKNE,EAA0B,SAAC,GAAkC,IAAhCP,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOO,EAAe,EAAfA,SAIrDC,EACF,0BACE,gBAAC,OAAD,CAAMP,GAAE,KAAQD,IAiBpB,OAZEQ,EAFIT,GAAYA,EAASU,SAClBV,EAASU,gBATdC,EAEU,IASV,0BACE,gBAAC,OAAD,CAAMT,GAAE,KAAQD,IAKlB,0BACE,gBAAC,OAAD,CAAMC,GAAE,KAAQD,IAVyB,gBAAC,WAAD,MAe7C,gBAAC,WAAD,KACE,gBAAC,IAAD,KACE,wBACEW,KAAK,WACLC,QAAQ,gFAGZ,gBAACT,EAAD,KACE,8BAASK,GACT,4BAAOD,GACP,oCAAW,IAAIM,MAAOC,cAAtB","file":"component---src-pages-using-typescript-tsx-2f8eb3596f0ecf50c3d0.js","sourcesContent":["import * as React from \"react\";\nimport { Layout } from \"../components/layout\";\nimport { SEO } from \"../components/seo\";\nimport { Link, PageProps } from \"gatsby\";\n// If you don't want to use TypeScript you can delete this file!\n\nconst UsingTypescript: React.FC<PageProps> = ({ path, location }) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <SEO title=\"Using TypeScript\" />\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <em>.ts/.tsx</em>\n      files for your pages, components etc. Please note that the <em>\n        gatsby-*.js\n      </em> files (like gatsby-node.js) currently do not support TypeScript yet.\n    </p>\n    <p>\n      For type checking you will want to install <em>typescript</em>\n      via npm and run <em>tsc --init</em> to create a <em>.tsconfig</em> file.\n    </p>\n    <p>You are currently on the page {path}\\\\</p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n);\n\nexport default UsingTypescript;\n\nexport const query = null;\n","import * as React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\ninterface Props {\n  location: Location;\n  title: string;\n}\n\nconst StyledContent = styled.div`\nmax-width: 1140px;\nmargin: auto;\n`;\n\nexport const Layout: React.FC<Props> = ({ location, title, children }) => {\n  let __PATH_PREFIX__;\n\n  const rootPath = `${__PATH_PREFIX__}/`;\n  let header = (\n    <h1>\n      <Link to={`/`}>{title}</Link>\n    </h1>\n  );\n  if (!(location && location.pathname)) header = <React.Fragment />;\n  else if (location.pathname === rootPath) {\n    header = (\n      <h1>\n        <Link to={`/`}>{title}</Link>\n      </h1>\n    );\n  } else {\n    header = (\n      <h2>\n        <Link to={`/`}>{title}</Link>\n      </h2>\n    );\n  }\n  return (\n    <React.Fragment>\n      <Helmet>\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"\n        />\n      </Helmet>\n      <StyledContent>\n        <header>{header}</header>\n        <main>{children}</main>\n        <footer>Â© {new Date().getFullYear()}, Zed vision</footer>\n      </StyledContent>\n    </React.Fragment>\n  );\n};\n"],"sourceRoot":""}