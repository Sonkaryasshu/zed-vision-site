{"version":3,"sources":["webpack:///./src/pages/using-typescript.tsx","webpack:///./src/components/seo.tsx"],"names":["UsingTypescript","path","location","title","to","query","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps"],"mappings":"8FAAA,2GA8BeA,UAvB8B,SAAC,GAAD,IAC3CC,EAD2C,EAC3CA,KACAC,EAF2C,EAE3CA,SAF2C,OAI3C,YAAC,IAAD,CAAQC,MAAM,mBAAmBD,SAAUA,GACzC,YAAC,IAAD,CAAKC,MAAM,qBACX,gEACA,iEAC2C,kCAD3C,+DAE8C,qCAF9C,wEAKA,iEAC2C,oCAD3C,oBAEM,oCAFN,gBAEsC,mCAFtC,UAIA,uDACiCF,EADjC,KAGA,YAAC,OAAD,CAAMG,GAAG,KAAT,6BAMG,IAAMC,EAAQ,M,kCChCrB,kDAsBMC,EAAM,SAAC,GAA8C,IAA5CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMN,EAAmB,EAAnBA,MAC9BO,EAASC,yBAAe,cAAxBD,KAgBFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,YAAC,IAAD,CACEO,eAAgB,CACdN,QAEFL,MAAOA,EACPY,cAAa,QAAUL,EAAKG,aAAaV,MACzCM,KAAM,CACJ,CACEO,KAAM,cACNC,QAASL,GAEX,CACEM,SAAU,WACVD,QAASd,GAEX,CACEe,SAAU,iBACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASP,EAAKG,aAAaM,OAAOC,SAEpC,CACEJ,KAAM,gBACNC,QAASd,GAEX,CACEa,KAAM,sBACNC,QAASL,IAEXS,OAAOZ,MAKfH,EAAIgB,aAAe,CACjBd,KAAM,KACNC,KAAM,GACNF,YAAa,IAUAD","file":"component---src-pages-using-typescript-tsx-664706ad79c404476654.js","sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst UsingTypescript: React.FC<PageProps> = ({\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <SEO title=\"Using TypeScript\" />\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <em>.ts/.tsx</em> files for your\n      pages, components etc. Please note that the <em>gatsby-*.js</em> files\n      (like gatsby-node.js) currently don't support TypeScript yet.\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>.tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" \n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default UsingTypescript\n\nexport const query = null\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\ninterface Props {\n  description: string\n  lang: string\n  meta: {\n    name: string\n    content: string\n  }[]\n  title: string\n}\n\nconst SEO = ({ description, lang, meta, title }: Props) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}