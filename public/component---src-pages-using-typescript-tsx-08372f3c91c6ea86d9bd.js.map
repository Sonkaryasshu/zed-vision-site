{"version":3,"sources":["webpack:///./src/pages/using-typescript.tsx","webpack:///./src/components/seo.tsx"],"names":["UsingTypescript","path","location","query","SEO","description","lang","meta","title","useStaticQuery","site","metaDescription","siteMetadata","name","content","property","social","twitter","concat","defaultProps"],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;CAEA;;AAEA,IAAMA,eAAoC,GAAG,SAAvCA,eAAuC;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,MAASC,QAAT,QAASA,QAAT;AAAA,sBAC3C,oDAAC,kEAAD;AAAQ,SAAK,EAAC,kBAAd;AAAiC,YAAQ,EAAEA;AAA3C,kBACE,oDAAC,+DAAD;AAAK,SAAK,EAAC;AAAX,IADF,eAEE,yGAFF,eAGE,yHAC2C,2EAD3C,+EAE8C,8EAF9C,yEAHF,eAQE,yHAC2C,6EAD3C,oCAEM,6EAFN,gCAEsC,4EAFtC,WARF,eAYE,kGAAkCD,IAAlC,OAZF,eAaE,oDAAC,2CAAD;AAAM,MAAE,EAAC;AAAT,+BAbF,CAD2C;AAAA,CAA7C;;AAkBeD,8EAAf;AAEO,IAAMG,KAAK,GAAG,IAAd,C;;;;;;;;AC1BP;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;AAiBA,IAAMC,GAAG,GAAG,SAANA,GAAM,OAA+C;AAAA,MAA5CC,WAA4C,QAA5CA,WAA4C;AAAA,MAA/BC,IAA+B,QAA/BA,IAA+B;AAAA,MAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,MAAnBC,KAAmB,QAAnBA,KAAmB;;AAAA,wBACxCC,6DAAc,cAD0B;AAAA,MACjDC,IADiD,mBACjDA,IADiD;;AAiBzD,MAAMC,eAAe,GAAGN,WAAW,IAAIK,IAAI,CAACE,YAAL,CAAkBP,WAAzD;AAEA,sBACE,oDAAC,2DAAD;AACE,kBAAc,EAAE;AACdC,UAAI,EAAJA;AADc,KADlB;AAIE,SAAK,EAAEE,KAJT;AAKE,iBAAa,YAAUE,IAAI,CAACE,YAAL,CAAkBJ,KAL3C;AAME,QAAI,EAAE,CACJ;AACEK,UAAI,eADN;AAEEC,aAAO,EAAEH;AAFX,KADI,EAKJ;AACEI,cAAQ,YADV;AAEED,aAAO,EAAEN;AAFX,KALI,EASJ;AACEO,cAAQ,kBADV;AAEED,aAAO,EAAEH;AAFX,KATI,EAaJ;AACEI,cAAQ,WADV;AAEED,aAAO;AAFT,KAbI,EAiBJ;AACED,UAAI,gBADN;AAEEC,aAAO;AAFT,KAjBI,EAqBJ;AACED,UAAI,mBADN;AAEEC,aAAO,EAAEJ,IAAI,CAACE,YAAL,CAAkBI,MAAlB,CAAyBC;AAFpC,KArBI,EAyBJ;AACEJ,UAAI,iBADN;AAEEC,aAAO,EAAEN;AAFX,KAzBI,EA6BJ;AACEK,UAAI,uBADN;AAEEC,aAAO,EAAEH;AAFX,KA7BI,EAiCJO,MAjCI,CAiCGX,IAjCH;AANR,IADF;AA2CD,CA9DD;;AAgEAH,GAAG,CAACe,YAAJ,GAAmB;AACjBb,MAAI,MADa;AAEjBC,MAAI,EAAE,EAFW;AAGjBF,aAAW;AAHM,CAAnB;AAaeD,4DAAf,E","file":"component---src-pages-using-typescript-tsx-08372f3c91c6ea86d9bd.js","sourcesContent":["import * as React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { Link, PageProps } from \"gatsby\"\n// If you don't want to use TypeScript you can delete this file!\n\nconst UsingTypescript: React.FC<PageProps> = ({ path, location }) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <SEO title=\"Using TypeScript\" />\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <em>.ts/.tsx</em> files for your\n      pages, components etc. Please note that the <em>gatsby-*.js</em> files\n      (like gatsby-node.js) currently don't support TypeScript yet.\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>.tsconfig</em> file.\n    </p>\n    <p>You're currently on the page \"{path}\"</p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default UsingTypescript\n\nexport const query = null\n","import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { Helmet } from \"react-helmet\"\n/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\ninterface Props {\n  description: string\n  lang: string\n  meta: {\n    name: string\n    content: string\n  }[]\n  title: string\n}\n\nconst SEO = ({ description, lang, meta, title }: Props) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}