{"version":3,"sources":["webpack:///./src/components/layout.tsx","webpack:///./src/components/seo.tsx","webpack:///./src/pages/offline-plugin-app-shell-fallback.tsx"],"names":["StyledContent","styled","div","Layout","location","title","children","header","to","pathname","__PATH_PREFIX__","name","content","Date","getFullYear","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","property","social","twitter","concat","defaultProps","NotFoundPage","data","siteTitle","pageQuery"],"mappings":"8FAAA,wCAUMA,EAVN,UAUsBC,EAAOC,IAAV,4EAAGD,CAAH,mCA6CJE,IAxCiB,SAAC,GAAkC,IAAhCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAI9CC,EACF,0BACE,gBAAC,OAAD,CAAMC,GAAE,KAAQH,IAiBpB,OAZEE,EAFIH,GAAYA,EAASK,SAClBL,EAASK,gBATdC,EAEU,IASV,0BACE,gBAAC,OAAD,CAAMF,GAAE,KAAQH,IAKlB,0BACE,gBAAC,OAAD,CAAMG,GAAE,KAAQH,IAVyB,gBAAC,WAAD,MAe7C,gCACE,gBAAC,IAAD,KACE,wBACEM,KAAK,WACLC,QAAQ,gFAGZ,gBAACZ,EAAD,KACE,8BAASO,GACT,4BAAOD,GACP,oCAAW,IAAIO,MAAOC,cAAtB,oB,kCCjDR,wCAqBMC,EAAM,SAAC,GAA8C,IAA5CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMb,EAAmB,EAAnBA,MAC9Bc,EAASC,yBAAe,cAAxBD,KAgBFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,gBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFZ,MAAOA,EACPmB,cAAa,QAAUL,EAAKG,aAAajB,MACzCa,KAAM,CACJ,CACEP,KAAM,cACNC,QAASS,GAEX,CACEI,SAAU,WACVb,QAASP,GAEX,CACEoB,SAAU,iBACVb,QAASS,GAEX,CACEI,SAAU,UACVb,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASO,EAAKG,aAAaI,OAAOC,SAEpC,CACEhB,KAAM,gBACNC,QAASP,GAEX,CACEM,KAAM,sBACNC,QAASS,IAEXO,OAAOV,MAKfH,EAAIc,aAAe,CACjBZ,KAAM,KACNC,KAAM,GACNF,YAAa,IAUAD,O,oCClGf,yFA6Bee,UAZM,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,KAAM3B,EAAsB,EAAtBA,SACtB4B,EAAYD,EAAKZ,KAAKG,aAAajB,MAEzC,OACE,gBAAC,IAAD,CAAQD,SAAUA,EAAUC,MAAO2B,GACjC,gBAAC,IAAD,CAAK3B,MAAM,gBACX,mDACA,6DAOC,IAAM4B,EAAY","file":"component---src-pages-offline-plugin-app-shell-fallback-tsx-d6ea943ff147af43b664.js","sourcesContent":["import * as React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\ninterface Props {\n  location: Location;\n  title: string;\n}\n\nconst StyledContent = styled.div`\nmax-width: 1140px;\nmargin: auto;\n`;\n\nconst Layout: React.FC<Props> = ({ location, title, children }) => {\n  let __PATH_PREFIX__;\n\n  const rootPath = `${__PATH_PREFIX__}/`;\n  let header = (\n    <h1>\n      <Link to={`/`}>{title}</Link>\n    </h1>\n  );\n  if (!(location && location.pathname)) header = <React.Fragment />;\n  else if (location.pathname === rootPath) {\n    header = (\n      <h1>\n        <Link to={`/`}>{title}</Link>\n      </h1>\n    );\n  } else {\n    header = (\n      <h2>\n        <Link to={`/`}>{title}</Link>\n      </h2>\n    );\n  }\n  return (\n    <>\n      <Helmet>\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"\n        />\n      </Helmet>\n      <StyledContent>\n        <header>{header}</header>\n        <main>{children}</main>\n        <footer>Â© {new Date().getFullYear()}, Zed vision</footer>\n      </StyledContent>\n    </>\n  );\n};\n\nexport default Layout;\n","import * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { Helmet } from \"react-helmet\";\n/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\ninterface Props {\n  description: string;\n  lang: string;\n  meta: {\n    name: string;\n    content: string;\n  }[];\n  title: string;\n}\n\nconst SEO = ({ description, lang, meta, title }: Props) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n};\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\ninterface Props {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n      };\n    };\n  };\n  location: Location;\n}\n\nconst NotFoundPage = ({ data, location }: Props) => {\n  const siteTitle = data.site.siteMetadata.title;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"... offline\" />\n      <h1>Maybe you are offline</h1>\n      <p>Check your internet connection</p>\n    </Layout>\n  );\n};\n\nexport default NotFoundPage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}