{"version":3,"sources":["webpack:///./src/components/layout.tsx","webpack:///./src/components/seo.tsx","webpack:///./src/pages/offline-plugin-app-shell-fallback.tsx"],"names":["Layout","header","location","title","children","pathname","__PATH_PREFIX__","to","Date","getFullYear","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","NotFoundPage","data","siteTitle","pageQuery"],"mappings":"6FAAA,kDAsCeA,IA5BiB,SAAC,GAAkC,IAI7DC,EAJ6BC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAmBlD,OAZEH,EADEC,EAASG,gBALTC,EAEU,IAKV,sBACE,YAAC,OAAD,CAAMC,GAAE,KAAQJ,IAKlB,sBACE,YAAC,OAAD,CAAMI,GAAE,KAAQJ,IAKpB,YAAC,IAAD,KACE,0BAASF,GACT,wBAAOG,GACP,gCAAW,IAAII,MAAOC,cAAtB,mB,kCCjCN,kDAsBMC,EAAM,SAAC,GAA8C,IAA5CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMV,EAAmB,EAAnBA,MAC9BW,EAASC,yBAAe,cAAxBD,KAgBFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,YAAC,IAAD,CACEO,eAAgB,CACdN,QAEFT,MAAOA,EACPgB,cAAa,QAAUL,EAAKG,aAAad,MACzCU,KAAM,CACJ,CACEO,KAAM,cACNC,QAASL,GAEX,CACEM,SAAU,WACVD,QAASlB,GAEX,CACEmB,SAAU,iBACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASP,EAAKG,aAAaM,OAAOC,SAEpC,CACEJ,KAAM,gBACNC,QAASlB,GAEX,CACEiB,KAAM,sBACNC,QAASL,IAEXS,OAAOZ,MAKfH,EAAIgB,aAAe,CACjBd,KAAM,KACNC,KAAM,GACNF,YAAa,IAUAD,O,oCCnGf,mGA6BeiB,UAZM,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,KAAM1B,EAAsB,EAAtBA,SACtB2B,EAAYD,EAAKd,KAAKG,aAAad,MAEzC,OACE,YAAC,IAAD,CAAQD,SAAUA,EAAUC,MAAO0B,GACjC,YAAC,IAAD,CAAK1B,MAAM,gBACX,+CACA,yDAOC,IAAM2B,EAAY","file":"component---src-pages-offline-plugin-app-shell-fallback-tsx-948f17e507e9518e8ce3.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport CustomLayout from \"../Layout\"\n\ninterface Props {\n  location: Location\n  title: string\n}\n\nconst Layout: React.FC<Props> = ({ location, title, children }) => {\n  let __PATH_PREFIX__\n\n  const rootPath = `${__PATH_PREFIX__}/`\n  let header\n\n  if (location.pathname === rootPath) {\n    header = (\n      <h1>\n        <Link to={`/`}>{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <h2>\n        <Link to={`/`}>{title}</Link>\n      </h2>\n    )\n  }\n  return (\n    <CustomLayout>\n      <header>{header}</header>\n      <main>{children}</main>\n      <footer>Â© {new Date().getFullYear()}, Zed vision</footer>\n    </CustomLayout>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\ninterface Props {\n  description: string\n  lang: string\n  meta: {\n    name: string\n    content: string\n  }[]\n  title: string\n}\n\nconst SEO = ({ description, lang, meta, title }: Props) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\ninterface Props {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n      }\n    }\n  }\n  location: Location\n}\n\nconst NotFoundPage = ({ data, location }: Props) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"... offline\" />\n      <h1>Maybe you are offline</h1>\n      <p>Check your internet connection</p>\n    </Layout>\n  )\n}\n\nexport default NotFoundPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}